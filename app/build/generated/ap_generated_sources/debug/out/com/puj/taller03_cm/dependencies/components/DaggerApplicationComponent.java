// Generated by Dagger (https://dagger.dev).
package com.puj.taller03_cm.dependencies.components;

import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.puj.taller03_cm.activities.BasicActivity;
import com.puj.taller03_cm.activities.BasicActivity_MembersInjector;
import com.puj.taller03_cm.activities.MapFragment;
import com.puj.taller03_cm.activities.MapFragment_MembersInjector;
import com.puj.taller03_cm.dependencies.modules.AlertsModule;
import com.puj.taller03_cm.dependencies.modules.AlertsModule_ProvideAlertHelperFactory;
import com.puj.taller03_cm.dependencies.modules.GeoInfoModule;
import com.puj.taller03_cm.dependencies.modules.GeoInfoModule_ProvideGeoInfoServiceFactory;
import com.puj.taller03_cm.dependencies.modules.GeocoderModule;
import com.puj.taller03_cm.dependencies.modules.GeocoderModule_ProvideGeoCoderServiceFactory;
import com.puj.taller03_cm.dependencies.modules.LocationModule;
import com.puj.taller03_cm.dependencies.modules.LocationModule_ProvideLocationServiceFactory;
import com.puj.taller03_cm.dependencies.modules.PermissionModule;
import com.puj.taller03_cm.dependencies.modules.PermissionModule_ProvidePermissionHelperFactory;
import com.puj.taller03_cm.utils.AlertsHelper;
import com.puj.taller03_cm.utils.PermissionHelper;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApplicationComponent {
  private DaggerApplicationComponent() {
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private AlertsModule alertsModule;

    private PermissionModule permissionModule;

    private GeoInfoModule geoInfoModule;

    private GeocoderModule geocoderModule;

    private LocationModule locationModule;

    private Builder() {
    }

    public Builder alertsModule(AlertsModule alertsModule) {
      this.alertsModule = Preconditions.checkNotNull(alertsModule);
      return this;
    }

    public Builder permissionModule(PermissionModule permissionModule) {
      this.permissionModule = Preconditions.checkNotNull(permissionModule);
      return this;
    }

    public Builder geoInfoModule(GeoInfoModule geoInfoModule) {
      this.geoInfoModule = Preconditions.checkNotNull(geoInfoModule);
      return this;
    }

    public Builder geocoderModule(GeocoderModule geocoderModule) {
      this.geocoderModule = Preconditions.checkNotNull(geocoderModule);
      return this;
    }

    public Builder locationModule(LocationModule locationModule) {
      this.locationModule = Preconditions.checkNotNull(locationModule);
      return this;
    }

    public ApplicationComponent build() {
      if (alertsModule == null) {
        this.alertsModule = new AlertsModule();
      }
      if (permissionModule == null) {
        this.permissionModule = new PermissionModule();
      }
      Preconditions.checkBuilderRequirement(geoInfoModule, GeoInfoModule.class);
      Preconditions.checkBuilderRequirement(geocoderModule, GeocoderModule.class);
      Preconditions.checkBuilderRequirement(locationModule, LocationModule.class);
      return new ApplicationComponentImpl(alertsModule, permissionModule, geoInfoModule, geocoderModule, locationModule);
    }
  }

  private static final class ApplicationComponentImpl implements ApplicationComponent {
    private final LocationModule locationModule;

    private final GeoInfoModule geoInfoModule;

    private final GeocoderModule geocoderModule;

    private final ApplicationComponentImpl applicationComponentImpl = this;

    private Provider<AlertsHelper> provideAlertHelperProvider;

    private Provider<PermissionHelper> providePermissionHelperProvider;

    private ApplicationComponentImpl(AlertsModule alertsModuleParam,
        PermissionModule permissionModuleParam, GeoInfoModule geoInfoModuleParam,
        GeocoderModule geocoderModuleParam, LocationModule locationModuleParam) {
      this.locationModule = locationModuleParam;
      this.geoInfoModule = geoInfoModuleParam;
      this.geocoderModule = geocoderModuleParam;
      initialize(alertsModuleParam, permissionModuleParam, geoInfoModuleParam, geocoderModuleParam, locationModuleParam);

    }

    @SuppressWarnings("unchecked")
    private void initialize(final AlertsModule alertsModuleParam,
        final PermissionModule permissionModuleParam, final GeoInfoModule geoInfoModuleParam,
        final GeocoderModule geocoderModuleParam, final LocationModule locationModuleParam) {
      this.provideAlertHelperProvider = DoubleCheck.provider(AlertsModule_ProvideAlertHelperFactory.create(alertsModuleParam));
      this.providePermissionHelperProvider = DoubleCheck.provider(PermissionModule_ProvidePermissionHelperFactory.create(permissionModuleParam));
    }

    @Override
    public void inject(BasicActivity activity) {
      injectBasicActivity(activity);
    }

    @Override
    public void inject(MapFragment fragment) {
      injectMapFragment(fragment);
    }

    @CanIgnoreReturnValue
    private BasicActivity injectBasicActivity(BasicActivity instance) {
      BasicActivity_MembersInjector.injectAlertsHelper(instance, provideAlertHelperProvider.get());
      BasicActivity_MembersInjector.injectPermissionHelper(instance, providePermissionHelperProvider.get());
      BasicActivity_MembersInjector.injectLocationService(instance, LocationModule_ProvideLocationServiceFactory.provideLocationService(locationModule));
      return instance;
    }

    @CanIgnoreReturnValue
    private MapFragment injectMapFragment(MapFragment instance) {
      MapFragment_MembersInjector.injectGeoInfoFromJsonService(instance, GeoInfoModule_ProvideGeoInfoServiceFactory.provideGeoInfoService(geoInfoModule));
      MapFragment_MembersInjector.injectGeocoderService(instance, GeocoderModule_ProvideGeoCoderServiceFactory.provideGeoCoderService(geocoderModule));
      return instance;
    }
  }
}
